// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Anime {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  episodes    Int
  releaseYear Int
  studio      String
  genres      String
  rating      Float
  imageUrl    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("animes")
}

model Personagem {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  age         Int
  power       Boolean
  anime       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personagens")
}

model Collection {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  releaseYear Int

  // Segundo: marcação da lista de dados da tabela dependente
  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

model Card {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  rarity        String
  attackPoints  Int
  defensePoints Int
  imageUrl      String?

  // Primeiro: configuração da tabela dependente
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cards")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
  userType String
  profileImage  String?
  bio      String?

  restaurants Restaurant[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Restaurant {
  id  Int    @id @default(autoincrement())
  name String
  category String
  deliveryFee Decimal
  logo String?
  openingHours String

   orders Order[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("restaurants")
}

model Order {
  id  Int    @id @default(autoincrement())
  status String
  totalAmount Decimal
  notes String?
  paymentMethod String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}
